{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wchen/Dropbox/UMN/2019_Spring/PLB_Capstone/PLB_Capstone/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wchen/Dropbox/UMN/2019_Spring/PLB_Capstone/PLB_Capstone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport hypothesis from \"../apis/hypothesis\";\nexport var fetchAnnots = function fetchAnnots(username) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return hypothesis.get(\"/search\", {\n                  params: {\n                    user: \"acct:\" + username + \"@hypothes.is\"\n                  }\n                });\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: \"FETCH_ANNOTS\",\n                  payload: response.data.rows\n                }); // return {\n                //   type: \"FETCH_ANNOTS\",\n                //   payload: response\n                // };\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchSearchedAnnots = function fetchSearchedAnnots(tag) {\n  console.log(\"tagggg\", tag);\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return hypothesis.get(\"/search\", {\n                  params: {\n                    tag: tag\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: \"FETCH_SEARCHED_ANNOTS\",\n                  payload: response.data.rows\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Spring/PLB_Capstone/PLB_Capstone/src/actions/index.js"],"names":["hypothesis","fetchAnnots","username","dispatch","getState","get","params","user","response","type","payload","data","rows","fetchSearchedAnnots","tag","console","log"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AACrC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAeC,QAAf,EAAyBC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACkBJ,UAAU,CAACK,GAAX,CAAe,SAAf,EAA0B;AAC/CC,kBAAAA,MAAM,EAAE;AACNC,oBAAAA,IAAI,EAAE,UAAUL,QAAV,GAAqB;AADrB;AADuC,iBAA1B,CADlB;;AAAA;AACCM,gBAAAA,QADD;AAOLL,gBAAAA,QAAQ,CAAC;AAAEM,kBAAAA,IAAI,EAAE,cAAR;AAAwBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAA/C,iBAAD,CAAR,CAPK,CASL;AACA;AACA;AACA;;AAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAcD,CAfM;AAiBP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,GAAG,EAAI;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAeX,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACkBH,UAAU,CAACK,GAAX,CAAe,SAAf,EAA0B;AAC/CC,kBAAAA,MAAM,EAAE;AACNQ,oBAAAA,GAAG,EAAEA;AADC;AADuC,iBAA1B,CADlB;;AAAA;AACCN,gBAAAA,QADD;AAOLL,gBAAAA,QAAQ,CAAC;AACPM,kBAAAA,IAAI,EAAE,uBADC;AAEPC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,iBAAD,CAAR;;AAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYD,CAdM","sourcesContent":["import hypothesis from \"../apis/hypothesis\";\n\nexport const fetchAnnots = username => {\n  return async function(dispatch, getState) {\n    const response = await hypothesis.get(\"/search\", {\n      params: {\n        user: \"acct:\" + username + \"@hypothes.is\"\n      }\n    });\n\n    dispatch({ type: \"FETCH_ANNOTS\", payload: response.data.rows });\n\n    // return {\n    //   type: \"FETCH_ANNOTS\",\n    //   payload: response\n    // };\n  };\n};\n\nexport const fetchSearchedAnnots = tag => {\n  console.log(\"tagggg\", tag);\n  return async function(dispatch) {\n    const response = await hypothesis.get(\"/search\", {\n      params: {\n        tag: tag\n      }\n    });\n\n    dispatch({\n      type: \"FETCH_SEARCHED_ANNOTS\",\n      payload: response.data.rows\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}